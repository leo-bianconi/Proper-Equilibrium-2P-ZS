# Options
option solver gurobi;

# Include files
model P_t.mod
model Q_t.mod
data game_data.dat

# Define problems
problem P_t: x, z, value_of_game, no_regret_on_unexploitable, min_max_on_exploitable, sum_to_one;
problem Q_t: x, p, sum_probabilities, no_regret_on_unexploitable, min_max_on_exploitable_upd;

let phi_2_t := phi_2;
let C2_t := {};

param t default 0;
param x_sol{i in phi_1} default 0;

repeat {
    let C2_t := phi_2 diff phi_2_t;

    printf "Iteration t=%d\n", t;
    printf "Solving P_%d...\n", t;

    # Solve P_t
    solve P_t;
    display x, z;
    
    let value_upd := z.val;         # update value of the game
    
    for {i in phi_1} {
        let x_sol[i] := x[i].val;   # copy x into x_sol
    }

    # Solve Q_t
    printf "Solving Q_%d...\n", t;
    display phi_2_t;
    solve Q_t;
    display x, p;

    # Delete non-exploitable moves of P2
    for {k in phi_2_t} {
        if p[k] < 1 then {
            let phi_2_t := phi_2_t diff {k}; 
        }
    }
    let t := t + 1;

    # Stopping criteria
    if forall {k in phi_2_t} p[k] < 1 then {
        break;
    }
}

printf "======================================\n";
printf "D-optimal strategy for player found:\n";
display x_sol;